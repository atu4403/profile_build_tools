[
  {
    "rendered_body": "\u003cp\u003e今回は使っていないPC=mac、サーバー=ubuntuでやってみましたが、mac以外でもubuntu以外でもほぼ作業は変わらないのでご参考に。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"目標\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%9B%AE%E6%A8%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e目標\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e古いmacをdockerサーバーにする\u003c/li\u003e\n\u003cli\u003eメインで使っているPCからSSHで接続して操作する\u003c/li\u003e\n\u003cli\u003e設定終わったら部屋の隅で電源入れっぱなしにする\u003c/li\u003e\n\u003cli\u003edockerの研究用\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e環境\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003emac : macmini(2011)\nUSBメモリ: 64G\nubuntu: ubuntu-20.04.1-desktop-amd64.iso\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eUSBメモリにubuntuのインストーラーを入れて、そこから起動してインストールする。\u003cbr\u003e\nUSBメモリは余っていた64Gのものを使用。事前にディスクユーティリティでMSDOSフォーマットした。\u003c/p\u003e\n\n\u003cp\u003e古いmacには以下のものを繋いだ\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e有線LAN\n有線キーボード\n有線マウス\nモニタ\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e作業が終わったらLANケーブル以外全部外す予定。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"インストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eインストール\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"usbメモリにisoを焼く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usb%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%ABiso%E3%82%92%E7%84%BC%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUSBメモリにisoを焼く\u003c/h3\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"1-ダウンロード\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. ダウンロード\u003c/h4\u003e\n\n\u003cp\u003eisoはミラーから落とす方が速い。色々試したが理研のサーバーが一番速かった。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.ubuntulinux.jp/products/JapaneseMirrors\" rel=\"nofollow noopener\" target=\"_blank\"\u003e日本国内のダウンロードサイト | Ubuntu Japanese Team\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://ftp.riken.go.jp/Linux/ubuntu-releases/focal/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eここ\u003c/a\u003eから\u003ccode\u003eubuntu-20.04.1-desktop-amd64.iso\u003c/code\u003eをダウンロード。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"2-etcherでisoをusbに焼く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-etcher%E3%81%A7iso%E3%82%92usb%E3%81%AB%E7%84%BC%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. Etcherでisoをusbに焼く\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/seigot/items/faea0998e17c40b3a63e\" id=\"reference-97a06e0c47b50093f101\"\u003eUbuntu20.04LTSのブートUSBをMacで作成する - Qiita\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://azriton.github.io/2017/11/12/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AEOS%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E7%84%BC%E3%81%8F%E3%81%A8%E3%81%8D%E3%81%AFEtcher%E3%81%8C%E4%BE%BF%E5%88%A9%EF%BC%86UI%E3%82%AB%E3%83%83%E3%82%B3%E3%81%84%E3%81%84/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eラズパイ の OS イメージを焼くときは Etcher が 便利 ＆ UI カッコいい | 験なきものを思はずは\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"古いmacをフォーマット\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%A4%E3%81%84mac%E3%82%92%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e古いmacをフォーマット\u003c/h3\u003e\n\n\u003cp\u003eディスクユーティリティでフォーマットする。ただしインストールの過程でフォーマットするのでこの工程いらないかも。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"usbからインストール\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usb%E3%81%8B%E3%82%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUSBからインストール\u003c/h3\u003e\n\n\u003cp\u003e古いmacにUSBメモリを刺してoptionキーを押したまま起動。USBのイメージ（？）がなぜか2つ表示されるけどどちらでも良いらしい。クリックしてインストール開始。\u003c/p\u003e\n\n\u003cp\u003e最初の選択肢で言語を選べるので素直に日本語を選択。ユーザー名とパスワードだけ忘れないように設定。\u003cbr\u003e\nあとは適当。できるだけ最小限で余計な物を入れないようにした。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"初期設定サーバーで直接操作\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A7%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初期設定(サーバーで直接操作)\u003c/h2\u003e\n\n\u003cp\u003e（ここからは「古いmac」を「サーバー」と呼びます）\u003cbr\u003e\n最低限必要な操作だけサーバー側で操作する。「端末」という名のターミナルを開く。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt-get \u003cspan class=\"nb\"\u003einstall \u003c/span\u003essh\nsystemctl start sshd\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれでとりあえずssh接続できる。\u003cbr\u003e\n接続するipを調べる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eip a\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e色々出たけど\u003ccode\u003e192.168.0.24\u003c/code\u003eの部分だけ控えとく。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eちなみにtips\u003cbr\u003e\n上では\u003ccode\u003eapt-get install\u003c/code\u003eしているけど、現在は\u003ccode\u003eapt install\u003c/code\u003eが推奨されているらしいです。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"初期設定sshで繋いで操作\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9Assh%E3%81%A7%E7%B9%8B%E3%81%84%E3%81%A7%E6%93%8D%E4%BD%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初期設定（SSHで繋いで操作）\u003c/h2\u003e\n\n\u003cp\u003eクライアントである普段使いのPCから接続。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003essh ユーザー名@ホスト名orIP\u003c/code\u003eという形式で。\u003c/p\u003e\n\n\u003cp\u003eパスワードを入れたら接続できる。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003essh atu@192.168.0.24\natu@192.168.0.24\u003cspan class=\"s1\"\u003e's password:\nWelcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-58-generic x86_64)\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003evimを入れようとしたら失敗\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt upgrade\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003evim\nWaiting \u003cspan class=\"k\"\u003efor \u003c/span\u003ecache lock: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 636\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eググって解決。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /var/lib/apt/lists/lock\n\u003cspan class=\"nb\"\u003esudo rm\u003c/span\u003e /var/cache/apt/archives/lock\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003evim\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/jizo/items/9496496a3156dd39d91a\" id=\"reference-9f613044ee0e0f539b51\"\u003eapt-getでエラーが出た場合の対処法：E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003evimを使ったことがない人は\u003ccode\u003evim 使い方\u003c/code\u003e等でググって調べて下さい。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eここから必要な工程\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eipアドレスの固定化\u003c/li\u003e\n\u003cli\u003essh鍵の作成、設置\u003c/li\u003e\n\u003cli\u003esshdの設定変更\n\n\u003cul\u003e\n\u003cli\u003eルートログインを不可に\u003c/li\u003e\n\u003cli\u003eパスワードログインを不可に\u003c/li\u003e\n\u003cli\u003eport変更\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003esleepしないように設定変更\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここからは指定のない限りメインPC（クライアント）での作業になる。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ipアドレスの固定化\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E5%9B%BA%E5%AE%9A%E5%8C%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eipアドレスの固定化\u003c/h2\u003e\n\n\u003cp\u003eとりあえず接続できたけど、今のままではルーターが時間制限有りでIPを割り振っている状態なので接続できなくなる可能性がある。\u003c/p\u003e\n\n\u003cp\u003eまず現在の状態を確認し、インターフェイス名を控えておく(下記のenp2hogeの部分)\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# サーバー側\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nt\"\u003e-4\u003c/span\u003e a\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: enp2hoge: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    inet 192.168.0.24/24 brd 192.168.0.255 scope global dynamic noprefixroute enp2hoge\n       valid_lft 83300sec preferred_lft 83300sec\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e/etc/netplan/\u003c/code\u003eの下に新しくyamlファイルを作成する。もともと\u003ccode\u003e01-network-manager-all.yaml\u003c/code\u003eというファイルがあるが、\u003ccode\u003e01\u003c/code\u003eの部分を大きい数字にすれば上書きされるのでこのファイルは残しておく。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003evim /etc/netplan/99_config.yaml\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e環境に応じて以下の様に書く。\u003cbr\u003e\n\u003ccode\u003eenp...\u003c/code\u003eの部分を先程控えたインターフェイス名に書き換え、addressesを固定ipに書き換える。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"vim\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003enetwork\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n  ethernets\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    enp2hoge\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      addresses\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e192\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e168\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e222\u003c/span\u003e/\u003cspan class=\"m\"\u003e24\u003c/span\u003e\n      gateway4\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e192\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e168\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n      nameservers\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        addresses\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e-\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意点\u003cbr\u003e\n- gateway4 -\u0026gt; もともと繋がっているルーターのアドレス\u003cbr\u003e\n- addresses -\u0026gt; gateway4の範囲内で指定。この場合は192.168.0.0から192.168.0.255まで\u003cbr\u003e\n- ↑とは言っても少ない値だったらカブってしまう可能性もあるので192.168.0.100-255くらい？\u003cbr\u003e\n- ルーターの設定により特定のIPが(例えば100以上)使えない場合もあるので注意\u003cbr\u003e\n- この設定では\u003ccode\u003e192.168.0.222\u003c/code\u003eでIPが固定される\u003cbr\u003e\n- \u003ccode\u003e192.168.0.222/24\u003c/code\u003eの最後の部分\u003ccode\u003e/24\u003c/code\u003eがサブネットマスク\u003cbr\u003e\n- \u003ccode\u003enameservers\u003c/code\u003eはgoogleの\u003ccode\u003e8.8.8.8\u003c/code\u003eでもなんでもお好きなヤツを\u003cbr\u003e\n- 保存したら設定を反映させる↓\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003enetplan apply\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eここで固まる。ctrl+cも受け付けないのでサーバー側で直接\u003ccode\u003eip a\u003c/code\u003eしてみたら設定は反映されてた。\u003cbr\u003e\nipアドレスが変わったことで接続ができなくなって固まったということ？\u003cbr\u003e\nこのコマンドはサーバー実機で直接行う方が良さそう。\u003c/p\u003e\n\n\u003cp\u003e参考:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://jyn.jp/ubuntu-localip-static/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e[Ubuntu]ローカルIPアドレスを固定にする\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/yas-nyan/items/9033fb1d1037dcf9dba5\" id=\"reference-6cb821f553705460cb07\"\u003e【Ubuntu】 /etc/netplan/50-cloud-init.yamlを編集するの止めろ - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"sshの設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ssh%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003esshの設定\u003c/h2\u003e\n\n\u003cp\u003eまずクライアントのmacで鍵を作成。私の\u003ccode\u003e.ssh/config\u003c/code\u003eは設定が多数あるので以下のような構成にしている。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003etree\n.\n├── config\n├── github\n│   ├── github_rsa\n│   └── github_rsa.pub\n└── gitlab\n    ├── id_rsa\n    └── id_rsa.pub\n\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e各hostごとにディレクトリを切ってその中に鍵を入れているのですが、そこまでしたくない人は適当に読み替えて下さい。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode\u003essh.keygen\u003c/code\u003eで鍵を作るのに昔はrsaを使っていたが現在は非推奨になっているらしい。ed25519がOpenSSH 7.2から使えるようになっているらしいのでバージョン確認。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# クライアント\u003c/span\u003e\nssh \u003cspan class=\"nt\"\u003e-V\u003c/span\u003e\nOpenSSH_7.9p1, LibreSSL 2.7.3\n\u003cspan class=\"c\"\u003e# サーバー\u003c/span\u003e\nssh \u003cspan class=\"nt\"\u003e-V\u003c/span\u003e\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1f  31 Mar 2020\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eed25519が使えるようなので作業開始。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# クライアント\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e .ssh\n\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003emacmini\nssh-keygen \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e ed25519 \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e ~/.ssh/macmini/id_ed25519\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e次にクライアントで\u003ccode\u003e.ssh/config\u003c/code\u003eの編集。以下の部分を追加した。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ehost macmini\n  HostName     192.168.0.222\n  Port         22\n  User         atu\n  IdentityFile ~/.ssh/macmini/id_ed25519\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eクライアントの設定は終わったので次に鍵をサーバーに置く。\u003cbr\u003e\n上記の例では\u003ccode\u003e~/.ssh/macmini/id_ed25519.pub\u003c/code\u003eが作成されている。これが公開鍵になる。\u003cbr\u003e\nscp使うとか色々方法はあるけど今回は\u003ccode\u003eid_ed25519.pub\u003c/code\u003eを開いて全文コピー、サーバーでペーストした。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# サーバー\u003c/span\u003e\n\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e .ssh\nvim ~/.ssh/authorized_keys\n\u003cspan class=\"c\"\u003e# vimでペーストして保存\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e一旦サーバーからexitして接続できるか確認。パスワードを聞かれることなく接続できたら成功。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003essh macmini\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参考:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://orumin.blogspot.com/2020/05/ssh-rsa.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003essh-rsa，非推奨のお知らせ\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"sshdの設定変更\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#sshd%E3%81%AE%E8%A8%AD%E5%AE%9A%E5%A4%89%E6%9B%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003esshdの設定変更\u003c/h2\u003e\n\n\u003cp\u003eこのままでは外部から侵入された時にブルートフォースされる可能性があるので設定変更。今の所公開する予定は無いけど念の為にsshd_configを書き換える。\u003c/p\u003e\n\n\u003cp\u003e以下は\u003ccode\u003essh macmini\u003c/code\u003eしてからサーバーでの作業。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003evim /etc/ssh/sshd_config\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e基本的に変更する項目を探して\u003ccode\u003e#\u003c/code\u003eのコメントアウトを外して値を書き換えるだけ。\u003cbr\u003e\nたとえばPortの変更は\u003ccode\u003e#Port 22\u003c/code\u003eの\u003ccode\u003e#\u003c/code\u003eを消して\u003ccode\u003e22\u003c/code\u003eの部分を変更する。\u003c/p\u003e\n\n\u003cp\u003e変更したのは以下の3つ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ePort 12345\nPasswordAuthentication no\nPermitRootLogin no\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e保存したら再起動。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e /etc/init.d/ssh restart\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eexitしてクライアント側の\u003ccode\u003e.ssh/config\u003c/code\u003eを開きPortを変更。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ehost macmini\n  HostName     192.168.0.222\n  Port         12345\n  User         atu\n  IdentityFile ~/.ssh/macmini/id_ed25519\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再度\u003ccode\u003essh macmini\u003c/code\u003eで接続できたら成功です。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"サスペンドしない設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%82%B9%E3%83%9A%E3%83%B3%E3%83%89%E3%81%97%E3%81%AA%E3%81%84%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサスペンドしない設定\u003c/h2\u003e\n\n\u003cp\u003eサーバーがsleepしないように設定しなきゃいけないと思っていたんだけど、今の所ずっと動いてくれているので何もしてない。ノートパソコンをサーバーにする時は必要なのかも。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/ikesama200/items/f595293de82ddc9fa3f1\" id=\"reference-161191a73a76cf31c62c\"\u003eUbuntu,Debianの自動サスペンドの解除 - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e以上で作業終了。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003eこれらの作業を終わらせて2日経ちました。この後にdocker入れてpythonでbot作ってscpしてdocker runして無事に動いています。\u003c/p\u003e\n\n\u003cp\u003eサーバーはmacとして使っている時はちょっと動かしただけで轟音がしてたのですが、現在はとても静かに動いてくれています。\u003c/p\u003e\n\n\u003cp\u003evagrant等で仮想サーバー建てて動かす方法もありますが、当然スリープしたら止まります。止まらないで24時間動いてくれるサーバーがあるのはやりたいことが膨らんで楽しいです。\u003c/p\u003e\n\n\u003cp\u003e古いPCを眠らせている方はぜひサーバーにして遊んでみて下さい！\u003c/p\u003e\n",
    "body": "今回は使っていないPC=mac、サーバー=ubuntuでやってみましたが、mac以外でもubuntu以外でもほぼ作業は変わらないのでご参考に。\n\n\n## 目標\n\n- 古いmacをdockerサーバーにする\n- メインで使っているPCからSSHで接続して操作する\n- 設定終わったら部屋の隅で電源入れっぱなしにする\n- dockerの研究用\n\n## 環境\n\n```\nmac : macmini(2011)\nUSBメモリ: 64G\nubuntu: ubuntu-20.04.1-desktop-amd64.iso\n```\nUSBメモリにubuntuのインストーラーを入れて、そこから起動してインストールする。\nUSBメモリは余っていた64Gのものを使用。事前にディスクユーティリティでMSDOSフォーマットした。\n\n古いmacには以下のものを繋いだ\n\n```\n有線LAN\n有線キーボード\n有線マウス\nモニタ\n```\n\n作業が終わったらLANケーブル以外全部外す予定。\n\n## インストール\n\n### USBメモリにisoを焼く\n\n#### 1. ダウンロード\n\nisoはミラーから落とす方が速い。色々試したが理研のサーバーが一番速かった。\n\n[日本国内のダウンロードサイト \\| Ubuntu Japanese Team](https://www.ubuntulinux.jp/products/JapaneseMirrors)\n\n[ここ](http://ftp.riken.go.jp/Linux/ubuntu-releases/focal/)から`ubuntu-20.04.1-desktop-amd64.iso`をダウンロード。\n\n#### 2. Etcherでisoをusbに焼く\n\n[Ubuntu20\\.04LTSのブートUSBをMacで作成する \\- Qiita](https://qiita.com/seigot/items/faea0998e17c40b3a63e)\n[ラズパイ の OS イメージを焼くときは Etcher が 便利 ＆ UI カッコいい \\| 験なきものを思はずは](https://azriton.github.io/2017/11/12/%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E3%81%AEOS%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E7%84%BC%E3%81%8F%E3%81%A8%E3%81%8D%E3%81%AFEtcher%E3%81%8C%E4%BE%BF%E5%88%A9%EF%BC%86UI%E3%82%AB%E3%83%83%E3%82%B3%E3%81%84%E3%81%84/)\n\n### 古いmacをフォーマット\n\nディスクユーティリティでフォーマットする。ただしインストールの過程でフォーマットするのでこの工程いらないかも。\n\n### USBからインストール\n\n古いmacにUSBメモリを刺してoptionキーを押したまま起動。USBのイメージ（？）がなぜか2つ表示されるけどどちらでも良いらしい。クリックしてインストール開始。\n\n最初の選択肢で言語を選べるので素直に日本語を選択。ユーザー名とパスワードだけ忘れないように設定。\nあとは適当。できるだけ最小限で余計な物を入れないようにした。\n\n## 初期設定(サーバーで直接操作)\n\n（ここからは「古いmac」を「サーバー」と呼びます）\n最低限必要な操作だけサーバー側で操作する。「端末」という名のターミナルを開く。\n\n```bash\nsudo apt-get install ssh\nsystemctl start sshd\n```\nこれでとりあえずssh接続できる。\n接続するipを調べる。\n\n```bash\nip a\n```\n\n色々出たけど`192.168.0.24`の部分だけ控えとく。\n\n\u003e ちなみにtips\n\u003e 上では`apt-get install`しているけど、現在は`apt install`が推奨されているらしいです。\n\n## 初期設定（SSHで繋いで操作）\n\nクライアントである普段使いのPCから接続。\n\n`ssh ユーザー名@ホスト名orIP`という形式で。\n\nパスワードを入れたら接続できる。\n\n```bash\nssh atu@192.168.0.24\natu@192.168.0.24's password:\nWelcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-58-generic x86_64)\n```\n\nvimを入れようとしたら失敗\n\n```bash\nsudo apt upgrade\nsudo apt install vim\nWaiting for cache lock: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 636\n```\n\nググって解決。\n\n```bash\nsudo rm /var/lib/apt/lists/lock\nsudo rm /var/cache/apt/archives/lock\nsudo apt install vim\n```\n\n[apt\\-getでエラーが出た場合の対処法：E: Could not get lock /var/lib/dpkg/lock \\- open \\(11: Resource temporarily unavailable\\) \\- Qiita](https://qiita.com/jizo/items/9496496a3156dd39d91a)\n\n\n\u003e vimを使ったことがない人は`vim 使い方`等でググって調べて下さい。\n\nここから必要な工程\n\n- ipアドレスの固定化\n- ssh鍵の作成、設置\n- sshdの設定変更\n  - ルートログインを不可に\n  - パスワードログインを不可に\n  - port変更\n- sleepしないように設定変更\n\nここからは指定のない限りメインPC（クライアント）での作業になる。\n\n## ipアドレスの固定化\n\nとりあえず接続できたけど、今のままではルーターが時間制限有りでIPを割り振っている状態なので接続できなくなる可能性がある。\n\nまず現在の状態を確認し、インターフェイス名を控えておく(下記のenp2hogeの部分)\n\n\n```bash\n# サーバー側\n$ ip -4 a\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: enp2hoge: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000\n    inet 192.168.0.24/24 brd 192.168.0.255 scope global dynamic noprefixroute enp2hoge\n       valid_lft 83300sec preferred_lft 83300sec\n```\n\n`/etc/netplan/`の下に新しくyamlファイルを作成する。もともと`01-network-manager-all.yaml`というファイルがあるが、`01`の部分を大きい数字にすれば上書きされるのでこのファイルは残しておく。\n\n```bash\nsudo vim /etc/netplan/99_config.yaml\n```\n\n環境に応じて以下の様に書く。\n`enp...`の部分を先程控えたインターフェイス名に書き換え、addressesを固定ipに書き換える。\n\n```vim\nnetwork:\n  version: 2\n  ethernets:\n    enp2hoge:\n      addresses:\n        - 192.168.0.222/24\n      gateway4: 192.168.0.1\n      nameservers:\n        addresses:\n          - 1.1.1.1\n          - 1.0.0.1\n```\n\n注意点\n- gateway4 -\u003e もともと繋がっているルーターのアドレス\n- addresses -\u003e gateway4の範囲内で指定。この場合は192.168.0.0から192.168.0.255まで\n- ↑とは言っても少ない値だったらカブってしまう可能性もあるので192.168.0.100-255くらい？\n- ルーターの設定により特定のIPが(例えば100以上)使えない場合もあるので注意\n- この設定では`192.168.0.222`でIPが固定される\n- `192.168.0.222/24`の最後の部分`/24`がサブネットマスク\n- `nameservers`はgoogleの`8.8.8.8`でもなんでもお好きなヤツを\n- 保存したら設定を反映させる↓\n\n```bash\nsudo netplan apply\n```\n\nここで固まる。ctrl+cも受け付けないのでサーバー側で直接`ip a`してみたら設定は反映されてた。\nipアドレスが変わったことで接続ができなくなって固まったということ？\nこのコマンドはサーバー実機で直接行う方が良さそう。\n\n参考:\n\n[[Ubuntu]ローカルIPアドレスを固定にする](https://jyn.jp/ubuntu-localip-static/)\n\n[【Ubuntu】 /etc/netplan/50\\-cloud\\-init\\.yamlを編集するの止めろ \\- Qiita](https://qiita.com/yas-nyan/items/9033fb1d1037dcf9dba5)\n\n## sshの設定\n\nまずクライアントのmacで鍵を作成。私の`.ssh/config`は設定が多数あるので以下のような構成にしている。\n\n```\ntree\n.\n├── config\n├── github\n│   ├── github_rsa\n│   └── github_rsa.pub\n└── gitlab\n    ├── id_rsa\n    └── id_rsa.pub\n\n```\n\n- 各hostごとにディレクトリを切ってその中に鍵を入れているのですが、そこまでしたくない人は適当に読み替えて下さい。\n\n`ssh.keygen`で鍵を作るのに昔はrsaを使っていたが現在は非推奨になっているらしい。ed25519がOpenSSH 7.2から使えるようになっているらしいのでバージョン確認。\n\n```bash\n# クライアント\nssh -V\nOpenSSH_7.9p1, LibreSSL 2.7.3\n# サーバー\nssh -V\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1f  31 Mar 2020\n```\n\ned25519が使えるようなので作業開始。\n\n```bash\n# クライアント\ncd .ssh\nmkdir macmini\nssh-keygen -t ed25519 -f ~/.ssh/macmini/id_ed25519\n```\n\n次にクライアントで`.ssh/config`の編集。以下の部分を追加した。\n\n```\nhost macmini\n  HostName     192.168.0.222\n  Port         22\n  User         atu\n  IdentityFile ~/.ssh/macmini/id_ed25519\n```\n\nクライアントの設定は終わったので次に鍵をサーバーに置く。\n上記の例では`~/.ssh/macmini/id_ed25519.pub`が作成されている。これが公開鍵になる。\nscp使うとか色々方法はあるけど今回は`id_ed25519.pub`を開いて全文コピー、サーバーでペーストした。\n\n```bash\n# サーバー\nmkdir .ssh\nvim ~/.ssh/authorized_keys\n# vimでペーストして保存\n```\n\n一旦サーバーからexitして接続できるか確認。パスワードを聞かれることなく接続できたら成功。\n\n```bash\nssh macmini\n```\n\n参考:\n\n[ssh\\-rsa，非推奨のお知らせ](https://orumin.blogspot.com/2020/05/ssh-rsa.html)\n\n## sshdの設定変更\n\nこのままでは外部から侵入された時にブルートフォースされる可能性があるので設定変更。今の所公開する予定は無いけど念の為にsshd_configを書き換える。\n\n以下は`ssh macmini`してからサーバーでの作業。\n\n```bash\nsudo vim /etc/ssh/sshd_config\n```\n\n基本的に変更する項目を探して`#`のコメントアウトを外して値を書き換えるだけ。\nたとえばPortの変更は`#Port 22`の`#`を消して`22`の部分を変更する。\n\n変更したのは以下の3つ。\n\n```\nPort 12345\nPasswordAuthentication no\nPermitRootLogin no\n```\n\n保存したら再起動。\n\n```bash\nsudo /etc/init.d/ssh restart\n```\n\nexitしてクライアント側の`.ssh/config`を開きPortを変更。\n\n```\nhost macmini\n  HostName     192.168.0.222\n  Port         12345\n  User         atu\n  IdentityFile ~/.ssh/macmini/id_ed25519\n```\n\n再度`ssh macmini`で接続できたら成功です。\n\n\n\n## サスペンドしない設定\n\nサーバーがsleepしないように設定しなきゃいけないと思っていたんだけど、今の所ずっと動いてくれているので何もしてない。ノートパソコンをサーバーにする時は必要なのかも。\n\n[Ubuntu,Debianの自動サスペンドの解除 \\- Qiita](https://qiita.com/ikesama200/items/f595293de82ddc9fa3f1)\n\n以上で作業終了。\n\n## まとめ\n\nこれらの作業を終わらせて2日経ちました。この後にdocker入れてpythonでbot作ってscpしてdocker runして無事に動いています。\n\nサーバーはmacとして使っている時はちょっと動かしただけで轟音がしてたのですが、現在はとても静かに動いてくれています。\n\nvagrant等で仮想サーバー建てて動かす方法もありますが、当然スリープしたら止まります。止まらないで24時間動いてくれるサーバーがあるのはやりたいことが膨らんで楽しいです。\n\n古いPCを眠らせている方はぜひサーバーにして遊んでみて下さい！\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-28T09:59:03+09:00",
    "group": null,
    "id": "6ea6721f00c477dcca5b",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "server", "versions": []},
      {"name": "Ubuntu", "versions": []},
      {"name": "SSH", "versions": []},
      {"name": "sshd_config", "versions": []}
    ],
    "title": "使っていないPCをサーバー化してみた",
    "updated_at": "2020-12-28T09:59:03+09:00",
    "url": "https://qiita.com/atu4403/items/6ea6721f00c477dcca5b",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cp\u003eある日、\u003ccode\u003epip search\u003c/code\u003eコマンドを打ってみたらエラーが出ました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e pip3 search pymongo\nERROR: Exception:\n\u003cspan class=\"c\"\u003e# -- 中略 --\u003c/span\u003e\n \u003cspan class=\"s1\"\u003e'RuntimeError: This API has been temporarily disabled due \nto unmanageable load and will be deprecated in the near future. \nPlease use the Simple or JSON API instead.'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e色々書いてあるけど要するに「apiあるからそっち使いな」ってことかな。\u003cbr\u003e\n調べてみたらpipには\u003ccode\u003eSimple\u003c/code\u003eと\u003ccode\u003eJSON\u003c/code\u003eのapiがあるようです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://pypi.org/simple/env-paths/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://pypi.org/simple/env-paths/\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://pypi.org/pypi/env-paths/json\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://pypi.org/pypi/env-paths/json\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれならサクッと必要な情報だけ抜いてスクリプト化できそう。\u003cbr\u003e\n\u003ccode\u003eSimple\u003c/code\u003eはhtmlが返ってきて使いにくそうなので\u003ccode\u003ejson\u003c/code\u003eの方を使います。\u003c/p\u003e\n\n\u003cp\u003epythonで書こうかと思ったんだけど、簡単そうなので慣れないシェルスクリプトで書いてみます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"完成品\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%8C%E6%88%90%E5%93%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e完成品\u003c/h2\u003e\n\n\u003cp\u003e結論から言うと、以下のコードを\u003ccode\u003e.zshrc\u003c/code\u003eに書くだけです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efunction \u003c/span\u003epips\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  curl \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e https://pypi.org/pypi/\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e/json | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2,$d'\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/'\u003c/span\u003e | jq \u003cspan class=\"nt\"\u003e--raw-output\u003c/span\u003e .info.package_url\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e機能が\u003ccode\u003epip search\u003c/code\u003eの代替えなので名前は\u003ccode\u003epips\u003c/code\u003eにしました。\u003cbr\u003e\njsonの処理に\u003ccode\u003ejq\u003c/code\u003eコマンドを使うのでインストールしました。ほとんどの環境でワンライナーインストールできます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://stedolan.github.io/jq/download/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDownload jq\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"解説\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E8%AA%AC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解説\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ecurl \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e https://pypi.org/pypi/\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e/json\n\u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2,$d'\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/'\u003c/span\u003e\njq \u003cspan class=\"nt\"\u003e--raw-output\u003c/span\u003e .info.package_url\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの4つをパイプで繋いでるだけです。2行目3行目はエラー処理しているだけなので必要なかったら\u003ccode\u003ecurl\u003c/code\u003eと\u003ccode\u003ejq\u003c/code\u003eを\u003ccode\u003e|\u003c/code\u003eで繋げればOK\u003c/p\u003e\n\n\u003cp\u003e1行ずつ解説します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ecurl \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e https://pypi.org/pypi/\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e/json\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eご存知\u003ccode\u003ecurl\u003c/code\u003eでapi取得してます。\u003ccode\u003e$1\u003c/code\u003eは探したいパッケージ名なので引数として渡してます。\u003cbr\u003e\n\u003ccode\u003epips hoge\u003c/code\u003eとコマンドを打ったら\u003ccode\u003e$1\u003c/code\u003eに\u003ccode\u003ehoge\u003c/code\u003eが入ります。\u003cbr\u003e\nオプション\u003ccode\u003e-s\u003c/code\u003eでログが出ないようにしています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ejq \u003cspan class=\"nt\"\u003e--raw-output\u003c/span\u003e .info.package_url\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eちょっと飛ばして4行目。apiから返ってきたjsonをjqに渡します。jsonは色々書いてあるけど省略するとこんな感じ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"info\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"author\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"atu4403\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"env-paths\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"package_url\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"https://pypi.org/project/env-paths/\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"platform\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"project_url\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"https://pypi.org/project/env-paths/\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"project_urls\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n      \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"Homepage\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"https://github.com/atu4403\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n      \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"Repository\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"https://github.com/atu4403/env-paths\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの中の\u003ccode\u003epackage_url\u003c/code\u003eだけ欲しいので\u003ccode\u003ejq\u003c/code\u003eに渡すのは\u003ccode\u003e.info.package_url\u003c/code\u003eとなります。ちなみに\u003ccode\u003e.\u003c/code\u003eはrootになります。\u003cbr\u003e\n通常ならダブルクォーテーション付きの文字列が返ってきますが、\u003ccode\u003e--raw-output\u003c/code\u003eオプションでrawなoutがputします。\u003c/p\u003e\n\n\u003cp\u003eこれだけでも実行できますが、この状態では登録されていない文字列でコマンド実行した時にエラーになります。apiが返すhtmlをjqに渡してもjsonじゃないので処理できない為です。\u003cbr\u003e\nそもそもの目的が\u003ccode\u003epipに登録する為にパッケージ名が使われていないか調べたい\u003c/code\u003eなので、ここはキッチリ処理したいところです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2,$d'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eapiから返ってきたテキストの2行目以降を削除しています。エラーの場合、複数行のhtmlが返ってくるので次の処理を行数分行ってしまいます。正しくjsonが返ってきた時は1行なのでこの処理は影響しません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正規表現\u003ccode\u003e/^[^{].*/\u003c/code\u003eで処理を分けています。ザックリ言うと\u003ccode\u003e{\u003c/code\u003eで始まってない場合は\u003cbr\u003e\n\u003ccode\u003e{\"info\":{\"package_url\":\"404 not found\"}}\u003c/code\u003eという文字列を返します。\u003cbr\u003e\njsonなら\u003ccode\u003e{\u003c/code\u003eで始まっているので何もしません。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e以上を\u003ccode\u003efunction\u003c/code\u003eで囲んだのが冒頭のコードです。これを\u003ccode\u003e.zshrc\u003c/code\u003eや\u003ccode\u003e.bashrc\u003c/code\u003eの適当な場所に置いて完成です。\u003cbr\u003e\n実行結果はこちら。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e pips\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e pips tdst\n404 not found\n\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e pips pymongo\nhttps://pypi.org/project/pymongo/\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003e私はシェルスクリプトあんまり知らないのですが、結構簡単にできました。\u003cbr\u003e\n認証が必要ならcurlで処理する方法もネットには溢れています。\u003cbr\u003e\nシェルスクリプトに苦手意識持っている方も是非チャレンジしてみてください！\u003c/p\u003e\n",
    "body": "ある日、`pip search`コマンドを打ってみたらエラーが出ました。\n\n\n```sh\n\u003e pip3 search pymongo\nERROR: Exception:\n# -- 中略 --\n 'RuntimeError: This API has been temporarily disabled due \nto unmanageable load and will be deprecated in the near future. \nPlease use the Simple or JSON API instead.'\n```\n\n色々書いてあるけど要するに「apiあるからそっち使いな」ってことかな。\n調べてみたらpipには`Simple`と`JSON`のapiがあるようです。\n\n[https://pypi.org/simple/env-paths/](https://pypi.org/simple/env-paths/)\n[https://pypi\\.org/pypi/env\\-paths/json](https://pypi.org/pypi/env-paths/json)\n\n\nこれならサクッと必要な情報だけ抜いてスクリプト化できそう。\n`Simple`はhtmlが返ってきて使いにくそうなので`json`の方を使います。\n\npythonで書こうかと思ったんだけど、簡単そうなので慣れないシェルスクリプトで書いてみます。\n\n## 完成品\n\n結論から言うと、以下のコードを`.zshrc`に書くだけです。\n\n```sh\nfunction pips() {\n  curl -s https://pypi.org/pypi/$1/json | sed '2,$d' | sed 's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/' | jq --raw-output .info.package_url\n}\n```\n\n機能が`pip search`の代替えなので名前は`pips`にしました。\njsonの処理に`jq`コマンドを使うのでインストールしました。ほとんどの環境でワンライナーインストールできます。\n\n[Download jq](https://stedolan.github.io/jq/download/)\n\n## 解説\n\n```sh\ncurl -s https://pypi.org/pypi/$1/json\nsed '2,$d'\nsed 's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/'\njq --raw-output .info.package_url\n```\n\nこの4つをパイプで繋いでるだけです。2行目3行目はエラー処理しているだけなので必要なかったら`curl`と`jq`を`|`で繋げればOK\n\n1行ずつ解説します。\n\n```sh\ncurl -s https://pypi.org/pypi/$1/json\n```\n\nご存知`curl`でapi取得してます。`$1`は探したいパッケージ名なので引数として渡してます。\n`pips hoge`とコマンドを打ったら`$1`に`hoge`が入ります。\nオプション`-s`でログが出ないようにしています。\n\n```sh\njq --raw-output .info.package_url\n```\n\nちょっと飛ばして4行目。apiから返ってきたjsonをjqに渡します。jsonは色々書いてあるけど省略するとこんな感じ。\n\n```json\n{\n  \"info\": {\n    \"author\": \"atu4403\",\n    \"name\": \"env-paths\",\n    \"package_url\": \"https://pypi.org/project/env-paths/\",\n    \"platform\": \"\",\n    \"project_url\": \"https://pypi.org/project/env-paths/\",\n    \"project_urls\": {\n      \"Homepage\": \"https://github.com/atu4403\",\n      \"Repository\": \"https://github.com/atu4403/env-paths\"\n    }\n  }\n}\n\n```\n\nこの中の`package_url`だけ欲しいので`jq`に渡すのは`.info.package_url`となります。ちなみに`.`はrootになります。\n通常ならダブルクォーテーション付きの文字列が返ってきますが、`--raw-output`オプションでrawなoutがputします。\n\nこれだけでも実行できますが、この状態では登録されていない文字列でコマンド実行した時にエラーになります。apiが返すhtmlをjqに渡してもjsonじゃないので処理できない為です。\nそもそもの目的が`pipに登録する為にパッケージ名が使われていないか調べたい`なので、ここはキッチリ処理したいところです。\n\n\n```sh\nsed '2,$d'\n```\n\napiから返ってきたテキストの2行目以降を削除しています。エラーの場合、複数行のhtmlが返ってくるので次の処理を行数分行ってしまいます。正しくjsonが返ってきた時は1行なのでこの処理は影響しません。\n\n```sh\nsed 's/^[^{].*/{\"info\":{\"package_url\":\"404 not found\"}}/'\n```\n\n正規表現`/^[^{].*/`で処理を分けています。ザックリ言うと`{`で始まってない場合は\n`{\"info\":{\"package_url\":\"404 not found\"}}`という文字列を返します。\njsonなら`{`で始まっているので何もしません。\n\n---\n\n以上を`function`で囲んだのが冒頭のコードです。これを`.zshrc`や`.bashrc`の適当な場所に置いて完成です。\n実行結果はこちら。\n\n\n```sh\n\u003e pips\n\n\u003e pips tdst\n404 not found\n\n\u003e pips pymongo\nhttps://pypi.org/project/pymongo/\n```\n\n## まとめ\n\n私はシェルスクリプトあんまり知らないのですが、結構簡単にできました。\n認証が必要ならcurlで処理する方法もネットには溢れています。\nシェルスクリプトに苦手意識持っている方も是非チャレンジしてみてください！\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-15T21:20:23+09:00",
    "group": null,
    "id": "35a9bfac0e0bccb2b403",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "ShellScript", "versions": []},
      {"name": "Bash", "versions": []},
      {"name": "Zsh", "versions": []}
    ],
    "title": "APIをお手軽にコマンド化する方法",
    "updated_at": "2020-12-15T21:20:23+09:00",
    "url": "https://qiita.com/atu4403/items/35a9bfac0e0bccb2b403",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cp\u003eこの記事は例としてPythonのコードが書いてありますが、Pythonに限らず多数のプログラミング言語で共通の概念です。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e変数numが奇数か偶数か判定するのに\u003ccode\u003enum % 2 != 0\u003c/code\u003eとして剰余の有無で調べる方法は一般的だと思います\u003csup id=\"fnref1\"\u003e\u003ca href=\"#fn1\" title=\"奇数判定を剰余で行うにはnum % 2 == 1ではなくnum % 2 != 0とした方が良いそうです（コメント欄参照）\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003cbr\u003e\u003cbr\u003e\nしかし\u003ccode\u003enum \u0026amp; 1\u003c/code\u003eでも判定できると聞きました。\u003cbr\u003e\nとりあえずやってみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efn1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"odd\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"even\"\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efn2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"odd\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"even\"\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efn1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efn2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eassert\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eforで1-99までの数値\u003ccode\u003ei\u003c/code\u003eを2つの関数で比較、assertで確認しています。もし2つの関数が違う値を返したらエラーになりますが、何回やってもエラーは出ませんでした。\u003c/p\u003e\n\n\u003cp\u003e「ふーん、そっかそりゃ良いこと聞いた」で終われれば良いのですが、理屈がわからないと気持ち悪いので調べました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ビット演算子\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%93%E3%83%83%E3%83%88%E6%BC%94%E7%AE%97%E5%AD%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eビット演算子\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003enum \u0026amp; 1\u003c/code\u003eの\u003ccode\u003e\u0026amp;\u003c/code\u003eはビット演算子です。\u003cbr\u003e\nビットとは何か？それはザックリ言うとコンピューターの最小単位、1か0かです。つまり2進数の一桁目。\u003cbr\u003e\n\u003ccode\u003e\u0026amp;\u003c/code\u003eは右辺と左辺を比較して\u003cstrong\u003eどちらも1なら1、どちらかが0なら0を返します\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center\"\u003e左辺\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003e右辺\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003e結果\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003ccode\u003enum \u0026amp; 1\u003c/code\u003eで言うと右辺は1で固定です。なので\u003ccode\u003enum\u003c/code\u003eが0なら偶数、1なら奇数になります。数値を条件式に使える言語\u003csup id=\"fnref2\"\u003e\u003ca href=\"#fn2\" title=\"True/False以外の値を条件式でどのように扱うかについてはこちらに説明があります\"\u003e2\u003c/a\u003e\u003c/sup\u003eでは1はTrue、0はFalseと判定されるのでこれだけで判定できるということです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/Ingward/items/43acda931c8a62c70d2f\" id=\"reference-24287a906c59fe5250d1\"\u003eビット演算入門 - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e「なるほどなるほど。これで解決だね」…とはいきません。\u003cbr\u003e\n\u003ccode\u003enum\u003c/code\u003eは2かもしれないし3かもしれない。もしかしたら100億兆円かもしれない(←?)  \u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eまだまだ謎は解けない...\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"バイト\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%90%E3%82%A4%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eバイト\u003c/h2\u003e\n\n\u003cp\u003e「コンピューターは1と0の集合体」と同じくらいよく耳にするのが「コンピューターはバイト単位で計算する」ということ。\u003cbr\u003e\n「1バイト=8ビット」とも聞きますね。\u003cbr\u003e\nつまり\u003ccode\u003e8桁=1バイト\u003c/code\u003eです。そこに含まれる数字はもちろん1か0です。つまり8桁の2進数ということ。\u003c/p\u003e\n\n\u003cp\u003e変数\u003ccode\u003enum\u003c/code\u003eに\u003ccode\u003e1\u003c/code\u003eを入れた時、プログラムは\u003ccode\u003e1\u003c/code\u003eではなく\u003ccode\u003e00000001\u003c/code\u003eというバイト単位で格納します。\u003cbr\u003e\n\u003ccode\u003e2\u003c/code\u003eは2進数だと\u003ccode\u003e10\u003c/code\u003eですが、これもバイト単位で\u003ccode\u003e00000010\u003c/code\u003eとして処理します。\u003cbr\u003e\nここで10進数と2進数の対応表を見て下さい。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: right\"\u003e10進数\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003e2進数\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e100\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e101\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e6\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e110\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e7\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e111\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e8\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1000\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e9\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1001\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e10\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1010\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e11\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1011\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e12\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1100\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e13\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1101\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e14\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1110\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e15\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1111\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e16\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10000\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e17\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10001\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e18\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10010\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e19\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10011\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: right\"\u003e20\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e10100\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eこのまま数が増えていき、10進数の\u003ccode\u003e255\u003c/code\u003eは2進数で\u003ccode\u003e11111111\u003c/code\u003eとなり1バイトで表す最大値になります。\u003cbr\u003e\n同様に数が増えていき\u003ccode\u003e65536\u003c/code\u003eが2バイトでの最大値になります。\u003cbr\u003e\nmysqlの\u003ccode\u003eTINYINT\u003c/code\u003e、\u003ccode\u003eSMALLINT\u003c/code\u003e(共に符号なし)と同じになりますね。\u003c/p\u003e\n\n\u003cp\u003eちょっと脱線しました。話は大きく戻ってビット演算子です。最初にビット演算子は\u003cstrong\u003eどちらも1なら1、どちらかが0なら0を返します\u003c/strong\u003eと言いましたが、実はコレもバイト単位で比較しているのです。\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eお...何かが見えてきたぞ...?\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"解決編\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E6%B1%BA%E7%B7%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解決編\u003c/h2\u003e\n\n\u003cp\u003e例えば\u003ccode\u003e16\u0026amp;20\u003c/code\u003eという演算をする場合、16はバイト単位で\u003ccode\u003e00010000\u003c/code\u003e、20は\u003ccode\u003e00010100\u003c/code\u003eとなります。\u003cbr\u003e\nこの\u003cstrong\u003e全ての桁で演算をして\u003c/strong\u003e結果を出しています。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eA\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eB\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eC\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eD\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eE\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eF\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eG\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eH\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e16\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e20\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e結果\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eD列は\u003ccode\u003eどちらも1\u003c/code\u003eなので結果は1になっていますが、他の列は全て\u003ccode\u003eどちらかが0\u003c/code\u003eなので結果も0になっています。\u003cbr\u003e\nこの結果を10進数に戻すと16。すなわち\u003ccode\u003e16 \u0026amp; 20 == 16\u003c/code\u003eとなります。\u003c/p\u003e\n\n\u003cp\u003e話を最初に戻しましょう。何故\u003ccode\u003enum\u0026amp;1\u003c/code\u003eで奇数判定ができるのかという話です。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enum\u0026amp;1\u003c/code\u003eの右辺は常に\u003ccode\u003e1\u003c/code\u003eですので\u003ccode\u003enum\u003c/code\u003eが何桁あろうとも結果の1桁目以外は必ず\u003ccode\u003e0\u003c/code\u003eになります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: left\"\u003e\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eA\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eB\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eC\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eD\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eE\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eF\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eG\u003c/th\u003e\n\u003cth style=\"text-align: left\"\u003eH\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003enum\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: left\"\u003e結果\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e0\u003c/td\u003e\n\u003ctd style=\"text-align: left\"\u003e?\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eそして10進数と2進数の対応表をもう一回見て下さい。ある法則が見えてきます。\u003cbr\u003e\n\u003ccode\u003e奇数の1桁目は常に1\u003c/code\u003eであり、\u003ccode\u003e偶数の1桁目は常に0\u003c/code\u003eなのです!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e謎は全て解けた！！！\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003enum\u003c/code\u003eの1桁目を見れば偶数か奇数か判定できる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enum\u003c/code\u003eと1の論理積を求めれば\u003ccode\u003enum\u003c/code\u003eの1桁目が返る\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enum\u0026amp;1\u003c/code\u003eの解が\u003ccode\u003e1\u003c/code\u003eなら奇数、\u003ccode\u003e0\u003c/code\u003eなら偶数である\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eちなみに、\u003cstrong\u003eどちらも1なら1、どちらかが0なら0を返します\u003c/strong\u003eというヤツは\u003cstrong\u003e論理積\u003c/strong\u003eというらしいです。\u003cbr\u003e\n「積」つまり掛け算。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e0x0=0\u003c/li\u003e\n\u003cli\u003e0x1=0\u003c/li\u003e\n\u003cli\u003e1x0=0\u003c/li\u003e\n\u003cli\u003e1x1=1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://ja.wikipedia.org/wiki/%E8%AB%96%E7%90%86%E7%A9%8D\" rel=\"nofollow noopener\" target=\"_blank\"\u003e論理積\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h3\u003e\n\n\u003cp\u003e「奇数判定するスマートな方法ないかなぁ」でググって知るまで3分。\u003cbr\u003e\n\u003ccode\u003enum\u0026amp;1\u003c/code\u003eで判定できると知ったものの理屈がわからなくて調べるのに1時間半。\u003cbr\u003e\nこの記事を書くのに1時間半。\u003c/p\u003e\n\n\u003cp\u003eこの3時間が無駄なのかどうかはわかりませんが、これだけ時間をかけたのでもう忘れません。\u003cbr\u003e\nたぶん忘れない。忘れないんじゃないかな。ま、ちょっと覚悟はしておけ。\u003c/p\u003e\n\n\u003cp\u003e( 完 )\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h3\u003e\n\n\u003cp\u003e自分なりの解釈で間違ってないとは思いますが、もし間違っていたらコメント欄から教えて頂けると喜びます。\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\n\u003cli id=\"fn1\"\u003e\n\u003cp\u003e奇数判定を剰余で行うには\u003ccode\u003enum % 2 == 1\u003c/code\u003eではなく\u003ccode\u003enum % 2 != 0\u003c/code\u003eとした方が良いそうです（コメント欄参照） \u003ca href=\"#fnref1\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003cli id=\"fn2\"\u003e\n\u003cp\u003eTrue/False以外の値を条件式でどのように扱うかについては\u003ca href=\"https://qiita.com/BlueRayi/items/a7753cc1657791f6504a#truthy%E3%81%A8falsy%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E9%9B%91%E8%AB%87\" id=\"reference-38de774a9c4d80178d1f\"\u003eこちら\u003c/a\u003eに説明があります \u003ca href=\"#fnref2\"\u003e↩\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\n\u003c/ol\u003e\n\u003c/div\u003e\n",
    "body": "この記事は例としてPythonのコードが書いてありますが、Pythonに限らず多数のプログラミング言語で共通の概念です。\n\n---\n\n変数numが奇数か偶数か判定するのに`num % 2 != 0`として剰余の有無で調べる方法は一般的だと思います[^1]  \nしかし`num \u0026 1`でも判定できると聞きました。\nとりあえずやってみましょう。\n\n\n```python\ndef fn1(num):\n    if num % 2 == 1:\n        return \"odd\"\n    else:\n        return \"even\"\n\n\ndef fn2(num):\n    if num \u0026 1:\n        return \"odd\"\n    else:\n        return \"even\"\n\n\nfor i in range(1, 100):\n    a = fn1(i)\n    b = fn2(i)\n    assert a == b\n```\n\nforで1-99までの数値`i`を2つの関数で比較、assertで確認しています。もし2つの関数が違う値を返したらエラーになりますが、何回やってもエラーは出ませんでした。\n\n「ふーん、そっかそりゃ良いこと聞いた」で終われれば良いのですが、理屈がわからないと気持ち悪いので調べました。\n\n## ビット演算子\n\n`num \u0026 1`の`\u0026`はビット演算子です。\nビットとは何か？それはザックリ言うとコンピューターの最小単位、1か0かです。つまり2進数の一桁目。\n`\u0026`は右辺と左辺を比較して**どちらも1なら1、どちらかが0なら0を返します**\n\n| 左辺 | 右辺 | 結果 |\n|:-:|:-:|:-:|\n|  0 |  0 | 0  |\n|  0 |  1 | 0  |\n|  1 |  0 | 0  |\n|  1 |  1 | 1  |\n\n`num \u0026 1`で言うと右辺は1で固定です。なので`num`が0なら偶数、1なら奇数になります。数値を条件式に使える言語[^2]では1はTrue、0はFalseと判定されるのでこれだけで判定できるということです。\n\n[ビット演算入門 \\- Qiita](https://qiita.com/Ingward/items/43acda931c8a62c70d2f)\n\n「なるほどなるほど。これで解決だね」…とはいきません。\n`num`は2かもしれないし3かもしれない。もしかしたら100億兆円かもしれない(←?)  \n\n*まだまだ謎は解けない...*\n\n## バイト\n\n「コンピューターは1と0の集合体」と同じくらいよく耳にするのが「コンピューターはバイト単位で計算する」ということ。\n「1バイト=8ビット」とも聞きますね。\nつまり`8桁=1バイト`です。そこに含まれる数字はもちろん1か0です。つまり8桁の2進数ということ。\n\n変数`num`に`1`を入れた時、プログラムは`1`ではなく`00000001`というバイト単位で格納します。\n`2`は2進数だと`10`ですが、これもバイト単位で`00000010`として処理します。\nここで10進数と2進数の対応表を見て下さい。\n\n|10進数|2進数|\n|--:|:--|\n|0|0|\n|1|1|\n|2|10|\n|3|11|\n|4|100|\n|5|101|\n|6|110|\n|7|111|\n|8|1000|\n|9|1001|\n|10|1010|\n|11|1011|\n|12|1100|\n|13|1101|\n|14|1110|\n|15|1111|\n|16|10000|\n|17|10001|\n|18|10010|\n|19|10011|\n|20|10100|\n\nこのまま数が増えていき、10進数の`255`は2進数で`11111111`となり1バイトで表す最大値になります。\n同様に数が増えていき`65536`が2バイトでの最大値になります。\nmysqlの`TINYINT `、`SMALLINT`(共に符号なし)と同じになりますね。\n\nちょっと脱線しました。話は大きく戻ってビット演算子です。最初にビット演算子は**どちらも1なら1、どちらかが0なら0を返します**と言いましたが、実はコレもバイト単位で比較しているのです。\n\n\n\n*お...何かが見えてきたぞ...?*\n\n## 解決編\n\n例えば`16\u002620`という演算をする場合、16はバイト単位で`00010000`、20は`00010100`となります。\nこの**全ての桁で演算をして**結果を出しています。\n\n||A|B|C|D|E|F|G|H|\n|:--|:--|:--|:--|:--|:--|:--|:--|:--|\n|16|0|0|0|1|0|0|0|0|\n|20|0|0|0|1|0|1|0|0|\n|結果|0|0|0|1|0|0|0|0|\n\nD列は`どちらも1`なので結果は1になっていますが、他の列は全て`どちらかが0`なので結果も0になっています。\nこの結果を10進数に戻すと16。すなわち`16 \u0026 20 == 16`となります。\n\n\n話を最初に戻しましょう。何故`num\u00261`で奇数判定ができるのかという話です。\n\n`num\u00261`の右辺は常に`1`ですので`num`が何桁あろうとも結果の1桁目以外は必ず`0`になります。\n\n||A|B|C|D|E|F|G|H|\n|:--|:--|:--|:--|:--|:--|:--|:--|:--|\n|num|||||||||\n|1|0|0|0|0|0|0|0|1|\n|結果|0|0|0|0|0|0|0|?|\n\n\nそして10進数と2進数の対応表をもう一回見て下さい。ある法則が見えてきます。\n`奇数の1桁目は常に1`であり、`偶数の1桁目は常に0`なのです!\n\n**謎は全て解けた！！！**\n\n1. `num`の1桁目を見れば偶数か奇数か判定できる\n2. `num`と1の論理積を求めれば`num`の1桁目が返る\n3. `num\u00261`の解が`1`なら奇数、`0`なら偶数である\n\nちなみに、**どちらも1なら1、どちらかが0なら0を返します**というヤツは**論理積**というらしいです。\n「積」つまり掛け算。\n\n- 0x0=0\n- 0x1=0\n- 1x0=0\n- 1x1=1\n\n\n[論理積](https://ja.wikipedia.org/wiki/%E8%AB%96%E7%90%86%E7%A9%8D)\n\n\n### まとめ\n\n「奇数判定するスマートな方法ないかなぁ」でググって知るまで3分。\n`num\u00261`で判定できると知ったものの理屈がわからなくて調べるのに1時間半。\nこの記事を書くのに1時間半。\n\nこの3時間が無駄なのかどうかはわかりませんが、これだけ時間をかけたのでもう忘れません。\nたぶん忘れない。忘れないんじゃないかな。ま、ちょっと覚悟はしておけ。\n\n( 完 )\n\n### 追記\n\n自分なりの解釈で間違ってないとは思いますが、もし間違っていたらコメント欄から教えて頂けると喜びます。\n\n[^1]: 奇数判定を剰余で行うには`num % 2 == 1`ではなく`num % 2 != 0`とした方が良いそうです（コメント欄参照）\n[^2]: True/False以外の値を条件式でどのように扱うかについては[こちら](https://qiita.com/BlueRayi/items/a7753cc1657791f6504a#truthy%E3%81%A8falsy%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E9%9B%91%E8%AB%87)に説明があります\n",
    "coediting": false,
    "comments_count": 3,
    "created_at": "2020-12-08T00:16:47+09:00",
    "group": null,
    "id": "36b2a7de126b9d4dbfcb",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "プログラミング", "versions": []},
      {"name": "ビット演算", "versions": []}
    ],
    "title": "奇数判定とbit演算子",
    "updated_at": "2021-02-18T17:40:02+09:00",
    "url": "https://qiita.com/atu4403/items/36b2a7de126b9d4dbfcb",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cp\u003e\u003cstrong\u003e注意: この記事はmacOS Sierra以降を使っている方が対象です\u003c/strong\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e生産性向上といえばショートカットキーの活用です。　　\u003cbr\u003e\nしかし問題になるのが\u003ccode\u003eどのキーをショートカットに割り当てたらいいのかわからない問題\u003c/code\u003eです。\u003cbr\u003e\nみんな大好きVSCODEでは簡単にショートカットを追加できます。追加しようと思ったキーが既に割り当てられていたら警告が出る安心設計です。しかし結局「どのキーが空いてるんだよ(´；ω；｀)」となります。\u003c/p\u003e\n\n\u003cp\u003eこの問題を解決する方法は\u003ccode\u003eKarabiner-Elements\u003c/code\u003eと\u003ccode\u003eCasplock\u003c/code\u003eの導入です。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eKarabiner-Elementsは、macOS Sierra以降でキーボードをカスタマイズするための強力なユーティリティです。\u003cbr\u003e\n(\u003ca href=\"https://github.com/pqrs-org/Karabiner-Elements\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公式GitHub\u003c/a\u003eより直訳)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eKarabiner-Elementsはこちらからダウンロードできます。\u003cbr\u003e\n\u003ca href=\"https://karabiner-elements.pqrs.org/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eKarabiner-Elements\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCapslockはこちらにREADMEがあります。\u003cbr\u003e\n\u003ca href=\"https://github.com/Vonng/Capslock\" rel=\"nofollow noopener\" target=\"_blank\"\u003eVonng/Capslock: Make Capslock Great Again!\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e敬虔なmac信者の方なら当たり前に使っているツールですが、Capslockを活用すればさらに便利です。\u003cbr\u003e\nざっくり言うと、\u003ccode\u003ecapslock\u003c/code\u003eを押すことが\u003ccode\u003ecmd+shift+ctrl+opt\u003c/code\u003eの4キーを同時押ししたことになります。\u003cbr\u003e\n例えばVSCODEのショートカット設定で\u003ccode\u003ecmd+shift+ctrl+opt+x\u003c/code\u003eというショートカットを登録すれば、実際には\u003ccode\u003ecapslock+x\u003c/code\u003eで使えるというわけです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"基本設定の方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E3%81%AE%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e基本設定の方法\u003c/h2\u003e\n\n\u003cp\u003eまずKarabiner-Elementsをインストールしていない方は\u003ca href=\"https://karabiner-elements.pqrs.org/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちら\u003c/a\u003eからどうぞ。\u003c/p\u003e\n\n\u003cp\u003e次に\u003ca href=\"https://ke-complex-modifications.pqrs.org/?q=vonng\" rel=\"nofollow noopener\" target=\"_blank\"\u003ekarabiner-elements-complex_modifications\u003c/a\u003eから\u003ccode\u003eCapslock Enhancement\u003c/code\u003eをインポートします。右のimportボタンを押すとお手軽に入れられます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/b705fd27663a1e8d6b88e0b9d2db84d71fcab12c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3837303737322f31383137656461642d383662352d313531332d643763382d3838363038643434656565392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F1817edad-86b5-1513-d7c8-88608d44eee9.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f8bc60ced7cd87e57fa5f7e357a2c877\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/1817edad-86b5-1513-d7c8-88608d44eee9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F1817edad-86b5-1513-d7c8-88608d44eee9.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=765f4e3a835169343e4ead76ed76bb32 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e次にKarabiner-Elementsを開き、Profilesタブをクリックします。\u003c/p\u003e\n\n\u003cp\u003e初めての方は\u003ccode\u003eDefault profile\u003c/code\u003eでOKですが、再設定したい場合は新しいprofileを作成すれば現在のprofileに手を加えずに安全に作業できます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eselected\u003c/code\u003eでチェックが入っているのが現在の設定です。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/0fbcca53fbb14bd0e4b735d0468cdef83c0506e0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3837303737322f35626530303538612d653134652d326634352d643163362d3539343231393365316561302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F5be0058a-e14e-2f45-d1c6-5942193e1ea0.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7744e512db37c44c328c953fb2213b0b\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/5be0058a-e14e-2f45-d1c6-5942193e1ea0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F5be0058a-e14e-2f45-d1c6-5942193e1ea0.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=eeb72db42163aff0a7436c8942497a77 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecomplex_modifications\u003c/code\u003eのタブを開いて左下の\u003ccode\u003e+Add rule\u003c/code\u003eから機能を追加します。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/08a428640cea60768aae2127fbe1c91c82531190/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3837303737322f34333337646164352d306262662d383466622d663338612d3036363536663363646264642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F4337dad5-0bbf-84fb-f38a-06656f3cdbdd.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=688bf60da68fc7addbd7ac5846c89368\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/4337dad5-0bbf-84fb-f38a-06656f3cdbdd.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F4337dad5-0bbf-84fb-f38a-06656f3cdbdd.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f104ee702b302bcde8da8a33a988d043 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eCapsLock to Hyper/Escape\u003c/code\u003eの右にある\u003ccode\u003eEnable\u003c/code\u003eを押すと有効化されます。(他のHyper...はここでは有効化しません)\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/c8803c22f33ce996e76eb968daa50f0ec8f95d72/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3837303737322f35313262366664392d383536372d383632372d343136302d6332313730343162613730322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F512b6fd9-8567-8627-4160-c217041ba702.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ac794bb7688d77adea11c9192f4e2aa2\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/512b6fd9-8567-8627-4160-c217041ba702.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F870772%2F512b6fd9-8567-8627-4160-c217041ba702.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7f6c120dce8c8135a0cdde437277fbe2 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれで\u003ccode\u003ecapslock\u003c/code\u003eが\u003ccode\u003ecmd+shift+ctrl+opt\u003c/code\u003eの4キー同時押しになります。また、単独で押すと\u003ccode\u003eesc\u003c/code\u003eキーとして動作します。\u003c/p\u003e\n\n\u003cp\u003eお好きなアプリケーションのショートカットを設定をして効率的な環境を作って下さい。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"独自設定の方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8B%AC%E8%87%AA%E8%A8%AD%E5%AE%9A%E3%81%AE%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e独自設定の方法\u003c/h2\u003e\n\n\u003cp\u003e「便利そうだけど、もう\u003ccode\u003ecapslock\u003c/code\u003eは\u003ccode\u003ectrl\u003c/code\u003eにアサインしてて慣れちゃってるんだよなー」という方。\u003cbr\u003e\n自分もそうでしたが、今は頻繁に使う\u003ccode\u003ectrl+a\u003c/code\u003eと\u003ccode\u003ectrl+e\u003c/code\u003eだけ\u003ccode\u003ecapslock\u003c/code\u003eにアサインしています。\u003ccode\u003ectrl+c\u003c/code\u003eも結構使うけどそれはそのまま元の\u003ccode\u003ectrl\u003c/code\u003eキーを使っています。\u003cbr\u003e\nなので一度、独自の設定をしてみることをオススメします。\u003c/p\u003e\n\n\u003cp\u003e独自設定の方法はこちらに詳しく書いてあるので参照して下さい。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/s-show/items/a1fd228b04801477729c\" id=\"reference-df254499dedbccc403e1\"\u003eKarabiner-Elementsの設定項目をまとめました - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eただし、記事にも書いてあるのですが、\u003ccode\u003ekarabiner.json\u003c/code\u003eではなく\u003ccode\u003e/assets/complex_modifications/\u003c/code\u003eの中に新しいjsonファイルを作ったほうがわかりやすくて失敗しませんのでオススメです。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"設定例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%AD%E5%AE%9A%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e設定例\u003c/h3\u003e\n\n\u003cp\u003e以下は私が実際に使用している\u003ccode\u003eKarabiner-Elements\u003c/code\u003eの設定です。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"コマンドキーを単体で押したときに英数かなキーを送信する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%AD%E3%83%BC%E3%82%92%E5%8D%98%E4%BD%93%E3%81%A7%E6%8A%BC%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E8%8B%B1%E6%95%B0%E3%81%8B%E3%81%AA%E3%82%AD%E3%83%BC%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコマンドキーを単体で押したときに、英数・かなキーを送信する\u003c/h4\u003e\n\n\u003cp\u003eUSキーボードの場合、英数とかなを切り替えるのに左右のcmdキーで切り替えます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"quit-application-by-pressing-command-q-twice\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#quit-application-by-pressing-command-q-twice\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eQuit application by pressing command-q twice\u003c/h4\u003e\n\n\u003cp\u003eうっかり\u003ccode\u003ecmd+q\u003c/code\u003eを押してしまうとアプリが終了してしまうのを防止します。\u003ccode\u003ecmd+q\u003c/code\u003eを2回押すことで終了できるようになります。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"hyper-navigation\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hyper-navigation\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eHyper Navigation\u003c/h4\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eここからは私の独自設定です。\u003ca href=\"https://gist.github.com/atu4403/683f580f8464a0b9f8eefd1e13300604\" rel=\"nofollow noopener\" target=\"_blank\"\u003eこちらのgist\u003c/a\u003eに設定方法が書いてありますので、同じ設定にしたい場合はダウンロードして使うことができます。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003evimに慣れている方は\u003ccode\u003ehjkl\u003c/code\u003eでカーソル移動を行いますが、私は何回も挫折しました。感覚的に上と下が横並びというのが慣れません。なので\u003ccode\u003ejikl\u003c/code\u003eをアサインしています。もちろん\u003ccode\u003ecapslock\u003c/code\u003eとの同時押しです。さらに\u003ccode\u003e左shift\u003c/code\u003e同時押しで選択もできます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"hyper-control\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hyper-control\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eHyper Control\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003ectrl+a\u003c/code\u003eと\u003ccode\u003ectrl+e\u003c/code\u003eだけ\u003ccode\u003ecapslock+a\u003c/code\u003eと\u003ccode\u003ecapslock+e\u003c/code\u003eにアサインしています。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"hyper-screenshot\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#hyper-screenshot\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eHyper ScreenShot\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003ecapslock+3\u003c/code\u003eで全画面スクリーンショット、\u003ccode\u003ecapslock+4\u003c/code\u003eで選択範囲スクリーンショットを取ります。保存ではなくクリップボードにコピーされますので、そのままqiitaやtwitterの投稿画面でpasteできます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003eお気づきの方も多いと思いますが、\u003ca href=\"https://github.com/Vonng/Capslock\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCapslock Enhancement\u003c/a\u003eをimportすると色んな\u003ccode\u003eHyper〇〇\u003c/code\u003eが一緒に入ります。　　\u003cbr\u003e\n便利なものもありますが、何でもかんでも有効化してしまうと結局はアプリごとに使えるショートカットが減ってしまいます。\u003c/p\u003e\n\n\u003cp\u003eあまり使わないものはできるだけ有効化しないことが便利な環境を作り上げるコツだと思います。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e\u003ca href=\"https://gist.github.com/atu4403/683f580f8464a0b9f8eefd1e13300604\" rel=\"nofollow noopener\" target=\"_blank\"\u003eKarabiner-Elements 設定項目\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこちらに私の設定ファイルを置いていますので参考にして下さい。(ついでにstarもお願いします)\u003cbr\u003e\nまた、「便利な設定ファイル作ったよ！」という方はコメント欄から教えて下さい。\u003c/p\u003e\n",
    "body": "**注意: この記事はmacOS Sierra以降を使っている方が対象です**\n\n---\n\n生産性向上といえばショートカットキーの活用です。　　\nしかし問題になるのが`どのキーをショートカットに割り当てたらいいのかわからない問題`です。\nみんな大好きVSCODEでは簡単にショートカットを追加できます。追加しようと思ったキーが既に割り当てられていたら警告が出る安心設計です。しかし結局「どのキーが空いてるんだよ(´；ω；｀)」となります。\n\nこの問題を解決する方法は`Karabiner-Elements`と`Casplock`の導入です。\n\n---\n\n\u003e Karabiner-Elementsは、macOS Sierra以降でキーボードをカスタマイズするための強力なユーティリティです。\n\u003e ([公式GitHub](https://github.com/pqrs-org/Karabiner-Elements)より直訳)\n\nKarabiner\\-Elementsはこちらからダウンロードできます。\n[Karabiner\\-Elements](https://karabiner-elements.pqrs.org/)\n\nCapslockはこちらにREADMEがあります。\n[Vonng/Capslock: Make Capslock Great Again\\!](https://github.com/Vonng/Capslock)\n\n敬虔なmac信者の方なら当たり前に使っているツールですが、Capslockを活用すればさらに便利です。\nざっくり言うと、`capslock`を押すことが`cmd+shift+ctrl+opt`の4キーを同時押ししたことになります。\n例えばVSCODEのショートカット設定で`cmd+shift+ctrl+opt+x`というショートカットを登録すれば、実際には`capslock+x`で使えるというわけです。\n\n## 基本設定の方法\n\nまずKarabiner-Elementsをインストールしていない方は[こちら](https://karabiner-elements.pqrs.org/)からどうぞ。\n\n次に[karabiner\\-elements\\-complex\\_modifications](https://ke-complex-modifications.pqrs.org/?q=vonng)から`Capslock Enhancement`をインポートします。右のimportボタンを押すとお手軽に入れられます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/1817edad-86b5-1513-d7c8-88608d44eee9.png)\n\n次にKarabiner-Elementsを開き、Profilesタブをクリックします。\n\n初めての方は`Default profile`でOKですが、再設定したい場合は新しいprofileを作成すれば現在のprofileに手を加えずに安全に作業できます。\n\n`selected`でチェックが入っているのが現在の設定です。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/5be0058a-e14e-2f45-d1c6-5942193e1ea0.png)\n\n`complex_modifications`のタブを開いて左下の`+Add rule`から機能を追加します。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/4337dad5-0bbf-84fb-f38a-06656f3cdbdd.png)\n\n\n`CapsLock to Hyper/Escape`の右にある`Enable`を押すと有効化されます。(他のHyper...はここでは有効化しません)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/512b6fd9-8567-8627-4160-c217041ba702.png)\n\n\nこれで`capslock`が`cmd+shift+ctrl+opt`の4キー同時押しになります。また、単独で押すと`esc`キーとして動作します。\n\nお好きなアプリケーションのショートカットを設定をして効率的な環境を作って下さい。\n\n\n## 独自設定の方法\n\n「便利そうだけど、もう`capslock`は`ctrl`にアサインしてて慣れちゃってるんだよなー」という方。\n自分もそうでしたが、今は頻繁に使う`ctrl+a`と`ctrl+e`だけ`capslock`にアサインしています。`ctrl+c`も結構使うけどそれはそのまま元の`ctrl`キーを使っています。\nなので一度、独自の設定をしてみることをオススメします。\n\n\n独自設定の方法はこちらに詳しく書いてあるので参照して下さい。\n\n[Karabiner\\-Elementsの設定項目をまとめました \\- Qiita](https://qiita.com/s-show/items/a1fd228b04801477729c)\n\nただし、記事にも書いてあるのですが、`karabiner.json`ではなく`/assets/complex_modifications/`の中に新しいjsonファイルを作ったほうがわかりやすくて失敗しませんのでオススメです。\n\n### 設定例\n\n以下は私が実際に使用している`Karabiner-Elements`の設定です。\n\n#### コマンドキーを単体で押したときに、英数・かなキーを送信する\n\nUSキーボードの場合、英数とかなを切り替えるのに左右のcmdキーで切り替えます。\n\n#### Quit application by pressing command-q twice\n\nうっかり`cmd+q`を押してしまうとアプリが終了してしまうのを防止します。`cmd+q`を2回押すことで終了できるようになります。\n\n#### Hyper Navigation\n\n\u003e ここからは私の独自設定です。[こちらのgist](https://gist.github.com/atu4403/683f580f8464a0b9f8eefd1e13300604)に設定方法が書いてありますので、同じ設定にしたい場合はダウンロードして使うことができます。\n\nvimに慣れている方は`hjkl`でカーソル移動を行いますが、私は何回も挫折しました。感覚的に上と下が横並びというのが慣れません。なので`jikl`をアサインしています。もちろん`capslock`との同時押しです。さらに`左shift`同時押しで選択もできます。\n\n#### Hyper Control\n\n`ctrl+a`と`ctrl+e`だけ`capslock+a`と`capslock+e`にアサインしています。\n\n\n#### Hyper ScreenShot\n\n`capslock+3`で全画面スクリーンショット、`capslock+4`で選択範囲スクリーンショットを取ります。保存ではなくクリップボードにコピーされますので、そのままqiitaやtwitterの投稿画面でpasteできます。\n\n## まとめ\n\nお気づきの方も多いと思いますが、[Capslock Enhancement](https://github.com/Vonng/Capslock)をimportすると色んな`Hyper〇〇`が一緒に入ります。　　\n便利なものもありますが、何でもかんでも有効化してしまうと結局はアプリごとに使えるショートカットが減ってしまいます。\n\nあまり使わないものはできるだけ有効化しないことが便利な環境を作り上げるコツだと思います。\n\n---\n\n[Karabiner\\-Elements 設定項目](https://gist.github.com/atu4403/683f580f8464a0b9f8eefd1e13300604)\n\nこちらに私の設定ファイルを置いていますので参考にして下さい。(ついでにstarもお願いします)\nまた、「便利な設定ファイル作ったよ！」という方はコメント欄から教えて下さい。\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-07T16:10:37+09:00",
    "group": null,
    "id": "9a2da7ec97c24b452c78",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "Mac", "versions": []},
      {"name": "MacOSX", "versions": []},
      {"name": "Karabiner", "versions": []},
      {"name": "karabiner-Elements", "versions": []}
    ],
    "title": "どのキーをショートカットに割り当てたらいいのかわからない問題(for Mac)",
    "updated_at": "2020-12-08T07:01:50+09:00",
    "url": "https://qiita.com/atu4403/items/9a2da7ec97c24b452c78",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cp\u003e\u003ca href=\"https://qiita.com/yuki_ycino/items/cb21cf91a39ddd61f484\" id=\"reference-10523cb361ec969cd3cc\"\u003eDXを大幅に低下させるDocker for Macを捨ててMac最速のDocker環境を手に入れる - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/necocoa/items/bd62ed3dba14b17552f2\" id=\"reference-8787cf72554a45cb60da\"\u003eVagrantを使う「Mac最速のDocker環境」を初心者向けに解説【遅いMac for Dockerを卒業】 - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e上記の記事を参考に\u003ccode\u003evagrant up\u003c/code\u003eした所、以下のようなエラーが出ました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eThe provider for this Vagrant-managed machine is reporting that it\nis not yet ready for SSH. Depending on your provider this can carry\ndifferent meanings. Make sure your machine is created and running and\ntry again. Additionally, check the output of `vagrant status` to verify\nthat the machine is in the state that you expect. If you continue to\nget this error message, please view the documentation for the provider\nyou're using.\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e解決方法を残しておきます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-vagrantfileを修正\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-vagrantfile%E3%82%92%E4%BF%AE%E6%AD%A3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. Vagrantfileを修正\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003emutagen\u003c/code\u003eを使っている部分でエラーが出ているようなので、以下の部分をコメントアウトします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eVagrant.configure\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'2'\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e |config|\n  config.vm.box \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ubuntu/xenial64'\u003c/span\u003e\n\n  config.vm.hostname \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e'vagrant01'\u003c/span\u003e\n\n  config.vm.network :private_network, ip: \u003cspan class=\"s1\"\u003e'10.212.212.212'\u003c/span\u003e\n\n  config.vm.provider :virtualbox \u003cspan class=\"k\"\u003edo\u003c/span\u003e |vb|\n    vb.gui \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\n    \u003c/span\u003evb.cpus \u003cspan class=\"o\"\u003e=\u003c/span\u003e 4\n    vb.memory \u003cspan class=\"o\"\u003e=\u003c/span\u003e 4096\n    vb.customize \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'modifyvm'\u003c/span\u003e, :id, \u003cspan class=\"s1\"\u003e'--natdnsproxy1'\u003c/span\u003e, \u003cspan class=\"s1\"\u003e'off'\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n    vb.customize \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'modifyvm'\u003c/span\u003e, :id, \u003cspan class=\"s1\"\u003e'--natdnshostresolver1'\u003c/span\u003e, \u003cspan class=\"s1\"\u003e'off'\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n  end\n\n  config.disksize.size \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e'30GB'\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# ここからコメントアウトする\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# config.mutagen.orchestrate = true\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# config.vm.synced_folder './', '/home/vagrant/app', type: \"rsync\",\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e#   rsync_auto: true,\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e#   rsync__exclude: ['.git/', 'node_modules/', 'log/', 'tmp/']\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# config.vm.provision :docker, run: 'always'\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# config.vm.provision :docker_compose\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# ここまで\u003c/span\u003e\nend\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-vagrant-up\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-vagrant-up\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. Vagrant up\u003c/h2\u003e\n\n\u003cp\u003eVagrantfileを修正した状態で起動すると成功します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003evagrant up\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-vagrantfileを元に戻す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-vagrantfile%E3%82%92%E5%85%83%E3%81%AB%E6%88%BB%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. Vagrantfileを元に戻す\u003c/h2\u003e\n\n\u003cp\u003eこのままではコメントアウトした部分の設定が反映されてないので、virtualboxを停止してからVagrantfileを戻します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003evagrant halt\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれで停止しますので、Vagrantfileのコメントアウトを外します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"4-vagrant-up\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#4-vagrant-up\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e4. Vagrant up\u003c/h2\u003e\n\n\u003cp\u003e再度起動します。1回目より時間がかかります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003evagrant up\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"5-確認\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#5-%E7%A2%BA%E8%AA%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e5. 確認\u003c/h2\u003e\n\n\u003cp\u003essh接続できれば成功です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003evagrant ssh\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e私のPCにはもともと\u003ccode\u003e~/.ssh/config\u003c/code\u003eは存在していたのですが、実行後に再確認すると追記されていました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"おまけ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8A%E3%81%BE%E3%81%91\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eおまけ\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003evagrant validate\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上記のコマンドでVagrantfileが正しく書かれているかチェックできます。\u003cbr\u003e\u003cbr\u003e\n私は\u003ccode\u003econfig.vm.hostname = 'vagrant_test'\u003c/code\u003eという設定をしていた所、ハイフンとかアンダーバーは使えないよ的な警告を受けました。\u003c/p\u003e\n",
    "body": "\n\n[DXを大幅に低下させるDocker for Macを捨ててMac最速のDocker環境を手に入れる \\- Qiita](https://qiita.com/yuki_ycino/items/cb21cf91a39ddd61f484)\n\n[Vagrantを使う「Mac最速のDocker環境」を初心者向けに解説【遅いMac for Dockerを卒業】 \\- Qiita](https://qiita.com/necocoa/items/bd62ed3dba14b17552f2)\n\n上記の記事を参考に`vagrant up`した所、以下のようなエラーが出ました。\n\n```\nThe provider for this Vagrant-managed machine is reporting that it\nis not yet ready for SSH. Depending on your provider this can carry\ndifferent meanings. Make sure your machine is created and running and\ntry again. Additionally, check the output of `vagrant status` to verify\nthat the machine is in the state that you expect. If you continue to\nget this error message, please view the documentation for the provider\nyou're using.\n```\n\n解決方法を残しておきます。\n\n## 1. Vagrantfileを修正\n\n`mutagen`を使っている部分でエラーが出ているようなので、以下の部分をコメントアウトします。\n\n```shell\nVagrant.configure('2') do |config|\n  config.vm.box = 'ubuntu/xenial64'\n\n  config.vm.hostname = 'vagrant01'\n\n  config.vm.network :private_network, ip: '10.212.212.212'\n\n  config.vm.provider :virtualbox do |vb|\n    vb.gui = false\n    vb.cpus = 4\n    vb.memory = 4096\n    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'off']\n    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'off']\n  end\n\n  config.disksize.size = '30GB'\n  # ここからコメントアウトする\n  # config.mutagen.orchestrate = true\n\n  # config.vm.synced_folder './', '/home/vagrant/app', type: \"rsync\",\n  #   rsync_auto: true,\n  #   rsync__exclude: ['.git/', 'node_modules/', 'log/', 'tmp/']\n\n  # config.vm.provision :docker, run: 'always'\n  # config.vm.provision :docker_compose\n  # ここまで\nend\n```\n\n## 2. Vagrant up\n\nVagrantfileを修正した状態で起動すると成功します。\n\n```sh\nvagrant up\n```\n\n## 3. Vagrantfileを元に戻す\n\nこのままではコメントアウトした部分の設定が反映されてないので、virtualboxを停止してからVagrantfileを戻します。\n\n```sh\nvagrant halt\n```\n\nこれで停止しますので、Vagrantfileのコメントアウトを外します。\n\n## 4. Vagrant up\n\n再度起動します。1回目より時間がかかります。\n\n```sh\nvagrant up\n```\n\n## 5. 確認\n\nssh接続できれば成功です。\n\n```\nvagrant ssh\n```\n\n私のPCにはもともと`~/.ssh/config`は存在していたのですが、実行後に再確認すると追記されていました。\n\n## おまけ\n\n\n```\nvagrant validate\n```\n\n上記のコマンドでVagrantfileが正しく書かれているかチェックできます。  \n私は`config.vm.hostname = 'vagrant_test'`という設定をしていた所、ハイフンとかアンダーバーは使えないよ的な警告を受けました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-12-03T09:44:11+09:00",
    "group": null,
    "id": "a408645412a0cbd6a465",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "Vagrant", "versions": []},
      {"name": "VirtualBox", "versions": []},
      {"name": "Docker", "versions": []}
    ],
    "title": "vagrant upに失敗した時の対応策",
    "updated_at": "2020-12-03T09:44:11+09:00",
    "url": "https://qiita.com/atu4403/items/a408645412a0cbd6a465",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cp\u003ePCの中に埋もれたgitリポジトリありませんか？私はたくさんあります。以下の方法で探り当てたリポジトリを見ると自分では全然覚えてない作りかけの物が出てきました。実家のタンスの奥から子供の頃のオモチャが出てきたような気分です。\u003c/p\u003e\n\n\u003cp\u003eもともとは「数ヶ月さわってないプロジェクトを久しぶりに開くにはどこに置いてたか探すことから始めなきゃならない」という当たり前のことに気付いたからでした。\u003cbr\u003e\n\u003ca href=\"https://github.com/x-motemen/ghq\" rel=\"nofollow noopener\" target=\"_blank\"\u003eghq\u003c/a\u003e等を使ってる方はちゃんと管理できてるんでしょう。しかしリポジトリ迷子の私みたいな方はたくさんいると思います。そして思いついたのが\u003ca href=\"https://github.com/peco/peco\" rel=\"nofollow noopener\" target=\"_blank\"\u003epeco\u003c/a\u003eを使った方法です。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/bb97a0c57486a324246df431659ca10a93867eb8/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f653536323533613136633838303436663662626464346338303331643334393630346462376436376430356532656135316230643636613166393930333863622f363837343734373033613266326637303635363336663265363736393734363837353632326536393666326636393664363136373635373332663730363536333666326436343635366436663264373037333265363736393636\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcamo.githubusercontent.com%2Fe56253a16c88046f6bbdd4c8031d349604db7d67d05e2ea51b0d66a1f99038cb%2F687474703a2f2f7065636f2e6769746875622e696f2f696d616765732f7065636f2d64656d6f2d70732e676966?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a03a9b6e5bb343bc51e855c75d8b331c\" alt=\"peco\" data-canonical-src=\"https://camo.githubusercontent.com/e56253a16c88046f6bbdd4c8031d349604db7d67d05e2ea51b0d66a1f99038cb/687474703a2f2f7065636f2e6769746875622e696f2f696d616765732f7065636f2d64656d6f2d70732e676966\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcamo.githubusercontent.com%2Fe56253a16c88046f6bbdd4c8031d349604db7d67d05e2ea51b0d66a1f99038cb%2F687474703a2f2f7065636f2e6769746875622e696f2f696d616765732f7065636f2d64656d6f2d70732e676966?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5a83c8cbb9154d6224aab431e3814105 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003cem\u003epeco公式より\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eこんな感じでリポジトリの一覧から選んでVSCODEで開けたら便利ですよね。\u003cbr\u003e\nその方法を実現する手順は以下の通り。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003efindコマンドでPC内からリポジトリの一覧を作成＆保存\u003c/li\u003e\n\u003cli\u003ezshrcにpecoの設定を追加\u003c/li\u003e\n\u003cli\u003ezshrcにfindのエイリアスを追加\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eこれだけです。\u003c/p\u003e\n\n\u003cp\u003eちなみにpecoのインストールについては公式を御覧ください。Homebrew, Scarf, apt等でもインストールできます。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/peco/peco#installation\" rel=\"nofollow noopener\" target=\"_blank\"\u003epeco/peco: Simplistic interactive filtering tool\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1-findコマンドでpc内からリポジトリの一覧を作成保存\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1-find%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7pc%E5%86%85%E3%81%8B%E3%82%89%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E4%B8%80%E8%A6%A7%E3%82%92%E4%BD%9C%E6%88%90%E4%BF%9D%E5%AD%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1. findコマンドでPC内からリポジトリの一覧を作成＆保存\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e find ~/Documents \u003cspan class=\"nt\"\u003e-regex\u003c/span\u003e \u003cspan class=\"s2\"\u003e\".*/.git\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /path/to/git_paths.txt\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e引数の\u003ccode\u003e~/Documents\u003c/code\u003eはgitリポジトリが眠っていそうな大体の場所です。まさか\u003ccode\u003e~/Movies\u003c/code\u003eとか\u003ccode\u003e~/Music\u003c/code\u003eなんかにリポジトリを置いてる人はいないでしょう。findは時間がかかるのである程度検索範囲を絞ったほうが良いです。私は基本的に\u003ccode\u003e~/Documents\u003c/code\u003e以下に置いているのでここを検索対象にしました。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/path/to/git_paths.txt\u003c/code\u003eは一覧を保存する場所です。適当なpathを指定してください。\u003cbr\u003e\nちなみに私の場合、コマンドの実行は約3分。170のリポジトリが発掘されました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2-zshrcにpecoの設定を追加\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2-zshrc%E3%81%ABpeco%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2. zshrcにpecoの設定を追加\u003c/h2\u003e\n\n\u003cp\u003e.zshrc(他のshellならその設定ファイル)を開いて以下を追記します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efunction \u003c/span\u003epeco-select-repository\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /path/to/git_paths.txt | \u003cspan class=\"nb\"\u003esed \u003c/span\u003es/\u003cspan class=\"se\"\u003e\\.\u003c/span\u003egit\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e/ | peco\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$repo\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003eprint \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003egp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epeco-select-repository\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e内容を解説すると２行目のcatでファイルを読み込み、sedで末尾の\u003ccode\u003e.git\u003c/code\u003eを削除(取得したいのは.gitディレクトリの親ディレクトリなので)、そしてpecoに渡しています。\u003c/p\u003e\n\n\u003cp\u003e4行目の\u003ccode\u003eprint -z \"${repo}\"\u003c/code\u003eでパスを出力します。そのまま実行しても仕方がないので目的により書き換えたほうが良いかもしれません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eprint \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"cd \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e   \u003cspan class=\"c\"\u003e# 移動したい場合\u003c/span\u003e\nprint \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"c\"\u003e# VSCODEで開きたい場合\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e個々の目的に応じて書き換えてください。\u003c/p\u003e\n\n\u003cp\u003eこれを保存してターミナルを開き直すと使えるようになります。\u003cbr\u003e\n\u003ccode\u003egp\u003c/code\u003e+returnでリポジトリの一覧が表示されます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"3-zshrcにfindのエイリアスを追加\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#3-zshrc%E3%81%ABfind%E3%81%AE%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9%E3%82%92%E8%BF%BD%E5%8A%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e3. zshrcにfindのエイリアスを追加\u003c/h2\u003e\n\n\u003cp\u003e1で実行したfindは定期的に行って更新する必要があります。とは言っても最近のリポジトリは覚えているでしょうから頻繁に行う必要はありません。数ヶ月に１回で十分だと思います。\u003cbr\u003e\nその時に\u003ccode\u003efind hogehoge~~~\u003c/code\u003eと書くのは面倒なのでaliasを設定しておきます。.zshrcに書きます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003ereposearch\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'find ~/Documents -regex \".*/.git\" \u0026gt; /path/to/git_paths.txt'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eターミナルを開き直すと\u003ccode\u003ereposearch\u003c/code\u003eでfindを実行できるようになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h2\u003e\n\n\u003cp\u003e最終的に私の\u003ccode\u003e.zshrc\u003c/code\u003eに追記したのはこんな感じです。\u003cbr\u003e\n\u003ccode\u003emy_git_repo.txt\u003c/code\u003eはzshrcの近くにある方が管理しやすいと思うので同じ階層の\u003ccode\u003e~/.zsh/\u003c/code\u003eに置くことにしました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efunction \u003c/span\u003epeco-select-repository\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e ~/.zsh/my_git_repo.txt | \u003cspan class=\"nb\"\u003esed \u003c/span\u003es/\u003cspan class=\"se\"\u003e\\.\u003c/span\u003egit\u003cspan class=\"nv\"\u003e$/\u003c/span\u003e/ | peco\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$repo\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003eprint \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"code \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003erepo\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003egp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epeco-select-repository\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003ereposearch\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'find ~/Documents -regex \".*/.git\" \u0026gt; ~/.zsh/my_git_repo.txt'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n",
    "body": "PCの中に埋もれたgitリポジトリありませんか？私はたくさんあります。以下の方法で探り当てたリポジトリを見ると自分では全然覚えてない作りかけの物が出てきました。実家のタンスの奥から子供の頃のオモチャが出てきたような気分です。\n\nもともとは「数ヶ月さわってないプロジェクトを久しぶりに開くにはどこに置いてたか探すことから始めなきゃならない」という当たり前のことに気付いたからでした。\n[ghq](https://github.com/x-motemen/ghq)等を使ってる方はちゃんと管理できてるんでしょう。しかしリポジトリ迷子の私みたいな方はたくさんいると思います。そして思いついたのが[peco](https://github.com/peco/peco)を使った方法です。\n\n![peco](https://camo.githubusercontent.com/e56253a16c88046f6bbdd4c8031d349604db7d67d05e2ea51b0d66a1f99038cb/687474703a2f2f7065636f2e6769746875622e696f2f696d616765732f7065636f2d64656d6f2d70732e676966)\n*peco公式より*\n\nこんな感じでリポジトリの一覧から選んでVSCODEで開けたら便利ですよね。\nその方法を実現する手順は以下の通り。\n\n1. findコマンドでPC内からリポジトリの一覧を作成＆保存\n2. zshrcにpecoの設定を追加\n3. zshrcにfindのエイリアスを追加\n\nこれだけです。\n\nちなみにpecoのインストールについては公式を御覧ください。Homebrew, Scarf, apt等でもインストールできます。\n\n[peco/peco: Simplistic interactive filtering tool](https://github.com/peco/peco#installation)\n\n## 1. findコマンドでPC内からリポジトリの一覧を作成＆保存\n\n```bash\n\u003e find ~/Documents -regex \".*/.git\" \u003e /path/to/git_paths.txt\n```\n\n引数の`~/Documents`はgitリポジトリが眠っていそうな大体の場所です。まさか`~/Movies`とか`~/Music`なんかにリポジトリを置いてる人はいないでしょう。findは時間がかかるのである程度検索範囲を絞ったほうが良いです。私は基本的に`~/Documents`以下に置いているのでここを検索対象にしました。\n\n`/path/to/git_paths.txt`は一覧を保存する場所です。適当なpathを指定してください。\nちなみに私の場合、コマンドの実行は約3分。170のリポジトリが発掘されました。\n\n## 2. zshrcにpecoの設定を追加\n\n.zshrc(他のshellならその設定ファイル)を開いて以下を追記します。\n\n```bash\nfunction peco-select-repository() {\n  local repo=$(cat /path/to/git_paths.txt | sed s/\\.git$// | peco)\n  if [ -n \"$repo\" ]; then\n    print -z \"${repo}\"\n  fi\n}\nalias gp=peco-select-repository\n```\n\n内容を解説すると２行目のcatでファイルを読み込み、sedで末尾の`.git`を削除(取得したいのは.gitディレクトリの親ディレクトリなので)、そしてpecoに渡しています。\n\n4行目の`print -z \"${repo}\"`でパスを出力します。そのまま実行しても仕方がないので目的により書き換えたほうが良いかもしれません。\n\n```bash\nprint -z \"cd ${repo}\"   # 移動したい場合\nprint -z \"code ${repo}\" # VSCODEで開きたい場合\n```\n\n個々の目的に応じて書き換えてください。\n\nこれを保存してターミナルを開き直すと使えるようになります。\n`gp`+returnでリポジトリの一覧が表示されます。\n\n## 3. zshrcにfindのエイリアスを追加\n\n1で実行したfindは定期的に行って更新する必要があります。とは言っても最近のリポジトリは覚えているでしょうから頻繁に行う必要はありません。数ヶ月に１回で十分だと思います。\nその時に`find hogehoge~~~`と書くのは面倒なのでaliasを設定しておきます。.zshrcに書きます。\n\n```bash\nalias reposearch='find ~/Documents -regex \".*/.git\" \u003e /path/to/git_paths.txt'\n```\n\nターミナルを開き直すと`reposearch`でfindを実行できるようになります。\n\n## まとめ\n\n最終的に私の`.zshrc`に追記したのはこんな感じです。\n`my_git_repo.txt`はzshrcの近くにある方が管理しやすいと思うので同じ階層の`~/.zsh/`に置くことにしました。\n\n```bash\nfunction peco-select-repository() {\n  local repo=$(cat ~/.zsh/my_git_repo.txt | sed s/\\.git$// | peco)\n  if [ -n \"$repo\" ]; then\n    print -z \"code ${repo}\"\n  fi\n}\nalias gp=peco-select-repository\nalias reposearch='find ~/Documents -regex \".*/.git\" \u003e ~/.zsh/my_git_repo.txt'\n```\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-11-28T11:29:52+09:00",
    "group": null,
    "id": "600163b791d0bea58910",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "Zsh", "versions": []},
      {"name": "Git", "versions": []},
      {"name": "shell", "versions": []},
      {"name": "Peco", "versions": []},
      {"name": "VSCode", "versions": []}
    ],
    "title": "[個人開発あるある] 失われたリポジトリを発掘する旅に出る",
    "updated_at": "2020-12-07T07:01:58+09:00",
    "url": "https://qiita.com/atu4403/items/600163b791d0bea58910",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  },
  {
    "rendered_body": "\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e'~/.config/remind_task/tasks.yml'\u003c/span\u003e\n\u003cspan class=\"n\"\u003edir_name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edirname\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emakedirs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edir_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexist_ok\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 上位ディレクトリが存在しなければ掘る\n\u003c/span\u003e\u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"w\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"hoge\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのようにファイルを開きファイルを作成するとホームディレクトリの\u003ccode\u003e.config/remind_task/tasks.yml\u003c/code\u003eにファイルが作成されると思ってしまう。\u003cbr\u003e\n上のコードを実行するとファイルは作成される。しかし無い。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e ~/.config/remind_task/tasks.yml\n\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e: /Users/atu/.config/remind_task/tasks.yml: No such file or directory\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eしかしファイルは作成されている。どこにあるのか探し回った結果、カレントディレクトリに作られていた。\u003cbr\u003e\u003cbr\u003e\nこの場合は\u003ccode\u003e/Users/atu/Documents/python/remind_task/~/.config/remind_task/tasks.yml\u003c/code\u003eにあった。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"/Users/atu/Documents/python/remind_task/~/.config/remind_task/tasks.yml\"\u003c/span\u003e\nhoge\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eチルダで始まるパスを扱う場合には以下のようにすればOKです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003epathlib\u003c/span\u003e\n\u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epathlib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"~/.config/remind_task/tasks.yml\"\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eexpanduser\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"path\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e## path /Users/atu/.config/remind_task/tasks.yml\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n",
    "body": "\n```python\npath = '~/.config/remind_task/tasks.yml'\ndir_name = os.path.dirname(path)\nos.makedirs(dir_name, exist_ok=True) # 上位ディレクトリが存在しなければ掘る\nwith open(path, mode=\"w\") as f:\n    f.write(\"hoge\")\n```\n\nこのようにファイルを開きファイルを作成するとホームディレクトリの`.config/remind_task/tasks.yml`にファイルが作成されると思ってしまう。\n上のコードを実行するとファイルは作成される。しかし無い。\n\n```shell\n\u003e cat ~/.config/remind_task/tasks.yml\ncat: /Users/atu/.config/remind_task/tasks.yml: No such file or directory\n```\n\nしかしファイルは作成されている。どこにあるのか探し回った結果、カレントディレクトリに作られていた。  \nこの場合は`/Users/atu/Documents/python/remind_task/~/.config/remind_task/tasks.yml`にあった。\n\n```shell\n\u003e cat \"/Users/atu/Documents/python/remind_task/~/.config/remind_task/tasks.yml\"\nhoge\n```\n\nチルダで始まるパスを扱う場合には以下のようにすればOKです。\n\n```python\nimport pathlib\npath = pathlib.Path(\"~/.config/remind_task/tasks.yml\").expanduser()\nprint(\"path\", path)\n## path /Users/atu/.config/remind_task/tasks.yml\n```\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2020-11-14T13:23:01+09:00",
    "group": null,
    "id": "7b7f6897fdf6f8b7d883",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {"name": "Python", "versions": []},
      {"name": "Python3", "versions": []}
    ],
    "title": "pythonのopenでチルダ(~)で始まるパスを指定したら行方不明になった話",
    "updated_at": "2020-11-14T23:27:26+09:00",
    "url": "https://qiita.com/atu4403/items/7b7f6897fdf6f8b7d883",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "atu4403",
      "items_count": 7,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 870772,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/870772/profile-images/1605327734",
      "team_only": false,
      "twitter_screen_name": "atu4403",
      "website_url": null
    },
    "page_views_count": null
  }
]
